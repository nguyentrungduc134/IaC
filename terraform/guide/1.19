#By default, a resource block configures one real infrastructure object (and similarly, a module block includes a child module's contents into the configuration one time). However, sometimes you want to manage several similar objects (like a fixed pool of compute instances) without writing a separate block for each one. 
Terraform has two ways to do this: count and for_each.
#If a resource or module block includes a for_each argument whose value is a map or a set of strings, 
Terraform creates one instance for each member of that map or set.
#for_each is a meta-argument defined by the Terraform language. It can be used with modules and with every resource type.
The for_each meta-argument accepts a map or a set of strings, and creates an instance for each item in that map or set. 
Each instance has a distinct infrastructure object associated with it, and each is separately created, updated, 
or destroyed when the configuration is applied.The for_each meta-argument accepts a map or a set of strings, 
and creates an instance for each item in that map or set. Each instance has a distinct infrastructure object associated with it,
 and each is separately created, updated, or destroyed when the configuration is applied.
#The for_each meta-argument accepts map or set expressions. However, unlike most arguments, 
the for_each value must be known before Terraform performs any remote resource actions. 
This means for_each can't refer to any resource attributes that aren't known until after a configuration 
is applied (such as a unique ID generated by the remote API when an object is created).
The for_each value must be a map or set with one element per desired resource instance. 
To use a sequence as the for_each value, you must use an expression that explicitly returns a set value, like the toset function.
 To prevent unwanted surprises during conversion, the for_each argument does not implicitly convert lists or tuples to sets.
