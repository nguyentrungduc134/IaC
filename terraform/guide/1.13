#The source argument in a module block tells Terraform where to find the source code for the desired child module.
Terraform uses this during the module installation step of terraform init to download the source code to a directory
 on local disk so that other Terraform commands can use it.
 The module installer supports installation from a number of different source types.
Local paths
Terraform Registry
GitHub
S3 buckets
#Each of these is described in the following sections. Module source addresses use a URL-like syntax,
 but with extensions to support unambiguous selection of sources and additional features.
We recommend using local file paths for closely-related modules used primarily for the purpose of
 factoring out repeated code elements, and using a native Terraform module registry for modules intended
 to be shared by multiple calling configurations. We support other sources so that you can potentially 
 distribute Terraform modules internally with existing infrastructure.
Many of the source types will make use of "ambient" credentials available when Terraform is run, 
such as from environment variables or credentials files in your home directory. This is covered in more detail in each of the following sections.
#Local path references allow for factoring out portions of a configuration within a single source repository.
Local paths are special in that they are not "installed" in the same sense that other sources are: 
the files are already present on local disk (possibly as a result of installing a parent module) and so can just be used directly.
 Their source code is automatically updated if the parent module is upgraded.
 #A module registry is the native way of distributing Terraform modules for use across multiple configurations, 
 using a Terraform-specific protocol that has full support for module versioning.
Terraform Registry is an index of modules shared publicly using this protocol. This public registry is the easiest way to 
get started with Terraform and find modules created by others in the community.
Arbitrary Git repositories can be used by prefixing the address with the special git:: prefix. After this prefix, any
 valid Git URL can be specified to select one of the protocols supported by Git.
#You can use archives stored in S3 as module sources using the special s3:: prefix, followed by an S3 bucket object URL.
