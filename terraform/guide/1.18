#By default, Terraform stores state locally in a file named terraform.tfstate. When working with Terraform in a team, 
use of a local file makes Terraform usage complicated because each user must make sure they always have the latest 
state data before running Terraform and make sure that nobody else runs Terraform at the same time.
With remote state, Terraform writes the state data to a remote data store, which can then be shared between all members of a team.
 Terraform supports storing state in Terraform Cloud, HashiCorp Consul, Amazon S3,
 Remote state allows you to share output values with other configurations. This allows your infrastructure to be decomposed into smaller components.
Put another way, remote state also allows teams to share infrastructure resources in a read-only way without relying on any additional configuration store.
For example, a core infrastructure team can handle building the core machines, networking, etc. 
and can expose some information to other teams to run their own infrastructure. As a more specific example with AWS: 
you can expose things such as VPC IDs, subnets, NAT instance IDs, etc. through remote state and have other Terraform states consume that.
#Locking and Teamwork
For fully-featured remote backends, Terraform can also use state locking to prevent concurrent runs of Terraform against the same state.
